// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola-translator-api/src/app/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// DictionaryLookup provides a mock function with given fields: ctx, fromLang, toLang, text
func (_m *UserUsecase) DictionaryLookup(ctx context.Context, fromLang domain.Lang2, toLang domain.Lang2, text string) ([]domain.Translation, error) {
	ret := _m.Called(ctx, fromLang, toLang, text)

	var r0 []domain.Translation
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang2, domain.Lang2, string) []domain.Translation); ok {
		r0 = rf(ctx, fromLang, toLang, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Translation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Lang2, domain.Lang2, string) error); ok {
		r1 = rf(ctx, fromLang, toLang, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DictionaryLookupWithPos provides a mock function with given fields: ctx, fromLang, toLang, text, pos
func (_m *UserUsecase) DictionaryLookupWithPos(ctx context.Context, fromLang domain.Lang2, toLang domain.Lang2, text string, pos domain.WordPos) (domain.Translation, error) {
	ret := _m.Called(ctx, fromLang, toLang, text, pos)

	var r0 domain.Translation
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang2, domain.Lang2, string, domain.WordPos) domain.Translation); ok {
		r0 = rf(ctx, fromLang, toLang, text, pos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Translation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Lang2, domain.Lang2, string, domain.WordPos) error); ok {
		r1 = rf(ctx, fromLang, toLang, text, pos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a cleanup function to assert the mocks expectations.
func NewUserUsecase(t testing.TB) *UserUsecase {
	mock := &UserUsecase{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
