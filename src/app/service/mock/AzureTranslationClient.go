// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola-translator-api/src/app/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola-translator-api/src/app/service"

	testing "testing"
)

// AzureTranslationClient is an autogenerated mock type for the AzureTranslationClient type
type AzureTranslationClient struct {
	mock.Mock
}

// DictionaryLookup provides a mock function with given fields: ctx, text, fromLang, toLang
func (_m *AzureTranslationClient) DictionaryLookup(ctx context.Context, text string, fromLang domain.Lang2, toLang domain.Lang2) ([]service.AzureTranslation, error) {
	ret := _m.Called(ctx, text, fromLang, toLang)

	var r0 []service.AzureTranslation
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Lang2, domain.Lang2) []service.AzureTranslation); ok {
		r0 = rf(ctx, text, fromLang, toLang)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.AzureTranslation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Lang2, domain.Lang2) error); ok {
		r1 = rf(ctx, text, fromLang, toLang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAzureTranslationClient creates a new instance of AzureTranslationClient. It also registers a cleanup function to assert the mocks expectations.
func NewAzureTranslationClient(t testing.TB) *AzureTranslationClient {
	mock := &AzureTranslationClient{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
