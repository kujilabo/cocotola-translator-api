// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola-translator-api/pkg/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola-translator-api/pkg/service"

	testing "testing"
)

// AzureTranslationRepository is an autogenerated mock type for the AzureTranslationRepository type
type AzureTranslationRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, lang, text, result
func (_m *AzureTranslationRepository) Add(ctx context.Context, lang domain.Lang2, text string, result []service.AzureTranslation) error {
	ret := _m.Called(ctx, lang, text, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang2, string, []service.AzureTranslation) error); ok {
		r0 = rf(ctx, lang, text, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Contain provides a mock function with given fields: ctx, lang, text
func (_m *AzureTranslationRepository) Contain(ctx context.Context, lang domain.Lang2, text string) (bool, error) {
	ret := _m.Called(ctx, lang, text)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang2, string) bool); ok {
		r0 = rf(ctx, lang, text)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Lang2, string) error); ok {
		r1 = rf(ctx, lang, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, lang, text
func (_m *AzureTranslationRepository) Find(ctx context.Context, lang domain.Lang2, text string) ([]service.AzureTranslation, error) {
	ret := _m.Called(ctx, lang, text)

	var r0 []service.AzureTranslation
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang2, string) []service.AzureTranslation); ok {
		r0 = rf(ctx, lang, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.AzureTranslation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Lang2, string) error); ok {
		r1 = rf(ctx, lang, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByFirstLetter provides a mock function with given fields: ctx, lang, firstLetter
func (_m *AzureTranslationRepository) FindByFirstLetter(ctx context.Context, lang domain.Lang2, firstLetter string) ([]domain.Translation, error) {
	ret := _m.Called(ctx, lang, firstLetter)

	var r0 []domain.Translation
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang2, string) []domain.Translation); ok {
		r0 = rf(ctx, lang, firstLetter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Translation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Lang2, string) error); ok {
		r1 = rf(ctx, lang, firstLetter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByText provides a mock function with given fields: ctx, lang, text
func (_m *AzureTranslationRepository) FindByText(ctx context.Context, lang domain.Lang2, text string) ([]domain.Translation, error) {
	ret := _m.Called(ctx, lang, text)

	var r0 []domain.Translation
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang2, string) []domain.Translation); ok {
		r0 = rf(ctx, lang, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Translation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Lang2, string) error); ok {
		r1 = rf(ctx, lang, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTextAndPos provides a mock function with given fields: ctx, lang, text, pos
func (_m *AzureTranslationRepository) FindByTextAndPos(ctx context.Context, lang domain.Lang2, text string, pos domain.WordPos) (domain.Translation, error) {
	ret := _m.Called(ctx, lang, text, pos)

	var r0 domain.Translation
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang2, string, domain.WordPos) domain.Translation); ok {
		r0 = rf(ctx, lang, text, pos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Translation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Lang2, string, domain.WordPos) error); ok {
		r1 = rf(ctx, lang, text, pos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAzureTranslationRepository creates a new instance of AzureTranslationRepository. It also registers a cleanup function to assert the mocks expectations.
func NewAzureTranslationRepository(t testing.TB) *AzureTranslationRepository {
	mock := &AzureTranslationRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
